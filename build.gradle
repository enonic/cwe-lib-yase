plugins {
	id 'java' // Needed for assemble and build
	id 'maven-publish' // Provides publishToMavenLocal
	id 'com.enonic.xp.base' version '2.0.0'
	id 'com.enonic.defaults' version '2.0.1' // Publishing
	id 'com.moowork.node' version '1.3.1'
}


repositories {
	xp.enonicRepo() // Not provided by com.enonic.defaults
	mavenLocal()
	jcenter()
	//maven {url 'http://repo.enonic.com/public'}
}


dependencies {
	//compile "com.enonic.xp:script-api:${xpVersion}" // Only needed if you lib has java code
	//compile "com.enonic.xp:core-api:${xpVersion}" // Just for apps?
	//compile "com.enonic.xp:portal-api:${xpVersion}" // Just for apps?

	//──────────────────────────────────────────────────────────────────────────
	// Core libs (com.enonic.xp)
	//──────────────────────────────────────────────────────────────────────────

	compile "com.enonic.xp:lib-admin:${xpVersion}"
	compile "com.enonic.xp:lib-auth:${xpVersion}"
	//compile "com.enonic.xp:lib-cluster:${xpVersion}"
	//compile "com.enonic.xp:lib-content:${xpVersion}"
	//compile "com.enonic.xp:lib-context:${xpVersion}"
	//compile "com.enonic.xp:lib-event:${xpVersion}"
	//compile "com.enonic.xp:lib-i18n:${xpVersion}"
	compile "com.enonic.xp:lib-io:${xpVersion}"
	//compile "com.enonic.xp:lib-mustache:${xpVersion}"
	//compile "com.enonic.xp:lib-node:${xpVersion}"
	compile "com.enonic.xp:lib-portal:${xpVersion}"
	//compile "com.enonic.xp:lib-repo:${xpVersion}"
	compile "com.enonic.xp:lib-task:${xpVersion}"
	//compile "com.enonic.xp:lib-thymeleaf:${xpVersion}"
	compile "com.enonic.xp:lib-value:${xpVersion}"

	//──────────────────────────────────────────────────────────────────────────
	// Other enonic libs (com.enonic.lib)
	//──────────────────────────────────────────────────────────────────────────

	compile 'com.enonic.lib:lib-cache:2.1.0'
	compile 'com.enonic.lib:lib-http-client:2.0.0'
	//compile 'com.enonic.lib:lib-router:1.0.0'
	//compile 'com.enonic.lib:menu:1.3.3'

	//compile 'com.enonic.lib:text-encoding:1.2.0'
	compile 'com.enonic.lib:lib-util:2.1.0'

	//compile files('../lib-cron/build/libs/lib-cron-0.1.0.jar')
}


tasks.withType(Copy) {
	includeEmptyDirs = false
}


//──────────────────────────────────────────────────────────────────────────────
// Gradle node plugin
//──────────────────────────────────────────────────────────────────────────────
node {
	version "${nodeVersion}"
	download true
}


//──────────────────────────────────────────────────────────────────────────────
// Webpack
//──────────────────────────────────────────────────────────────────────────────
task webpack(type:NodeTask) {
	dependsOn npmInstall
	mustRunAfter npmInstall
	script = file('node_modules/webpack-cli/bin/cli.js')
	args = [
		'--color'
	]
	outputs.dir './build/resources/main/lib/' // processResources will delete the directory if this is not present
}


processResources {
	exclude '**/.gitkeep'

	// Let webpack handle these (rather than gradle)
	exclude '**/*.css'
	exclude '**/*.es'
	exclude '**/*.js'
	exclude '**/*.jsx'
	exclude '**/*.less'
	exclude '**/*.sass'
	exclude '**/*.scss'
	exclude '**/*.styl'
}

processResources.mustRunAfter webpack
processResources.dependsOn webpack
